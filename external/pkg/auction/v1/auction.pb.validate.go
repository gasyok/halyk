// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: auction/v1/auction.proto

package auction

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Lot with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Lot) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Lot with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in LotMultiError, or nil if none found.
func (m *Lot) ValidateAll() error {
	return m.validate(true)
}

func (m *Lot) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for SellerId

	// no validation rules for Title

	// no validation rules for Description

	// no validation rules for StartPrice

	// no validation rules for AuctionId

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LotValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LotValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LotValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return LotMultiError(errors)
	}

	return nil
}

// LotMultiError is an error wrapping multiple validation errors returned by
// Lot.ValidateAll() if the designated constraints aren't met.
type LotMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LotMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LotMultiError) AllErrors() []error { return m }

// LotValidationError is the validation error returned by Lot.Validate if the
// designated constraints aren't met.
type LotValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LotValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LotValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LotValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LotValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LotValidationError) ErrorName() string { return "LotValidationError" }

// Error satisfies the builtin error interface
func (e LotValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLot.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LotValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LotValidationError{}

// Validate checks the field values on UpBalanceRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpBalanceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpBalanceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpBalanceRequestMultiError, or nil if none found.
func (m *UpBalanceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpBalanceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUserId() <= 0 {
		err := UpBalanceRequestValidationError{
			field:  "UserId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetAmount() <= 0 {
		err := UpBalanceRequestValidationError{
			field:  "Amount",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return UpBalanceRequestMultiError(errors)
	}

	return nil
}

// UpBalanceRequestMultiError is an error wrapping multiple validation errors
// returned by UpBalanceRequest.ValidateAll() if the designated constraints
// aren't met.
type UpBalanceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpBalanceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpBalanceRequestMultiError) AllErrors() []error { return m }

// UpBalanceRequestValidationError is the validation error returned by
// UpBalanceRequest.Validate if the designated constraints aren't met.
type UpBalanceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpBalanceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpBalanceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpBalanceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpBalanceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpBalanceRequestValidationError) ErrorName() string { return "UpBalanceRequestValidationError" }

// Error satisfies the builtin error interface
func (e UpBalanceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpBalanceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpBalanceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpBalanceRequestValidationError{}

// Validate checks the field values on UpBalanceResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *UpBalanceResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpBalanceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpBalanceResponseMultiError, or nil if none found.
func (m *UpBalanceResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpBalanceResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return UpBalanceResponseMultiError(errors)
	}

	return nil
}

// UpBalanceResponseMultiError is an error wrapping multiple validation errors
// returned by UpBalanceResponse.ValidateAll() if the designated constraints
// aren't met.
type UpBalanceResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpBalanceResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpBalanceResponseMultiError) AllErrors() []error { return m }

// UpBalanceResponseValidationError is the validation error returned by
// UpBalanceResponse.Validate if the designated constraints aren't met.
type UpBalanceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpBalanceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpBalanceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpBalanceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpBalanceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpBalanceResponseValidationError) ErrorName() string {
	return "UpBalanceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpBalanceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpBalanceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpBalanceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpBalanceResponseValidationError{}

// Validate checks the field values on CreateLotRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateLotRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateLotRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateLotRequestMultiError, or nil if none found.
func (m *CreateLotRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateLotRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetSellerId() <= 0 {
		err := CreateLotRequestValidationError{
			field:  "SellerId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetTitle()); l < 4 || l > 32 {
		err := CreateLotRequestValidationError{
			field:  "Title",
			reason: "value length must be between 4 and 32 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Description

	if m.GetStartPrice() <= 0 {
		err := CreateLotRequestValidationError{
			field:  "StartPrice",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CreateLotRequestMultiError(errors)
	}

	return nil
}

// CreateLotRequestMultiError is an error wrapping multiple validation errors
// returned by CreateLotRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateLotRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateLotRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateLotRequestMultiError) AllErrors() []error { return m }

// CreateLotRequestValidationError is the validation error returned by
// CreateLotRequest.Validate if the designated constraints aren't met.
type CreateLotRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateLotRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateLotRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateLotRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateLotRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateLotRequestValidationError) ErrorName() string { return "CreateLotRequestValidationError" }

// Error satisfies the builtin error interface
func (e CreateLotRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateLotRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateLotRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateLotRequestValidationError{}

// Validate checks the field values on FetchLotRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *FetchLotRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FetchLotRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FetchLotRequestMultiError, or nil if none found.
func (m *FetchLotRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *FetchLotRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for LotId

	if len(errors) > 0 {
		return FetchLotRequestMultiError(errors)
	}

	return nil
}

// FetchLotRequestMultiError is an error wrapping multiple validation errors
// returned by FetchLotRequest.ValidateAll() if the designated constraints
// aren't met.
type FetchLotRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FetchLotRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FetchLotRequestMultiError) AllErrors() []error { return m }

// FetchLotRequestValidationError is the validation error returned by
// FetchLotRequest.Validate if the designated constraints aren't met.
type FetchLotRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FetchLotRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FetchLotRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FetchLotRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FetchLotRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FetchLotRequestValidationError) ErrorName() string { return "FetchLotRequestValidationError" }

// Error satisfies the builtin error interface
func (e FetchLotRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFetchLotRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FetchLotRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FetchLotRequestValidationError{}

// Validate checks the field values on FetchLotResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *FetchLotResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FetchLotResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FetchLotResponseMultiError, or nil if none found.
func (m *FetchLotResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *FetchLotResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FetchLotResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FetchLotResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FetchLotResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return FetchLotResponseMultiError(errors)
	}

	return nil
}

// FetchLotResponseMultiError is an error wrapping multiple validation errors
// returned by FetchLotResponse.ValidateAll() if the designated constraints
// aren't met.
type FetchLotResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FetchLotResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FetchLotResponseMultiError) AllErrors() []error { return m }

// FetchLotResponseValidationError is the validation error returned by
// FetchLotResponse.Validate if the designated constraints aren't met.
type FetchLotResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FetchLotResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FetchLotResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FetchLotResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FetchLotResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FetchLotResponseValidationError) ErrorName() string { return "FetchLotResponseValidationError" }

// Error satisfies the builtin error interface
func (e FetchLotResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFetchLotResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FetchLotResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FetchLotResponseValidationError{}

// Validate checks the field values on ListLotsRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListLotsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListLotsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListLotsRequestMultiError, or nil if none found.
func (m *ListLotsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListLotsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListLotsRequestMultiError(errors)
	}

	return nil
}

// ListLotsRequestMultiError is an error wrapping multiple validation errors
// returned by ListLotsRequest.ValidateAll() if the designated constraints
// aren't met.
type ListLotsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListLotsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListLotsRequestMultiError) AllErrors() []error { return m }

// ListLotsRequestValidationError is the validation error returned by
// ListLotsRequest.Validate if the designated constraints aren't met.
type ListLotsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListLotsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListLotsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListLotsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListLotsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListLotsRequestValidationError) ErrorName() string { return "ListLotsRequestValidationError" }

// Error satisfies the builtin error interface
func (e ListLotsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListLotsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListLotsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListLotsRequestValidationError{}

// Validate checks the field values on ListLotsResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListLotsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListLotsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListLotsResponseMultiError, or nil if none found.
func (m *ListLotsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListLotsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetLots() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListLotsResponseValidationError{
						field:  fmt.Sprintf("Lots[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListLotsResponseValidationError{
						field:  fmt.Sprintf("Lots[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListLotsResponseValidationError{
					field:  fmt.Sprintf("Lots[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListLotsResponseMultiError(errors)
	}

	return nil
}

// ListLotsResponseMultiError is an error wrapping multiple validation errors
// returned by ListLotsResponse.ValidateAll() if the designated constraints
// aren't met.
type ListLotsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListLotsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListLotsResponseMultiError) AllErrors() []error { return m }

// ListLotsResponseValidationError is the validation error returned by
// ListLotsResponse.Validate if the designated constraints aren't met.
type ListLotsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListLotsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListLotsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListLotsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListLotsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListLotsResponseValidationError) ErrorName() string { return "ListLotsResponseValidationError" }

// Error satisfies the builtin error interface
func (e ListLotsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListLotsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListLotsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListLotsResponseValidationError{}

// Validate checks the field values on CreateLotResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateLotResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateLotResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateLotResponseMultiError, or nil if none found.
func (m *CreateLotResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateLotResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateLotResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateLotResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateLotResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateLotResponseMultiError(errors)
	}

	return nil
}

// CreateLotResponseMultiError is an error wrapping multiple validation errors
// returned by CreateLotResponse.ValidateAll() if the designated constraints
// aren't met.
type CreateLotResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateLotResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateLotResponseMultiError) AllErrors() []error { return m }

// CreateLotResponseValidationError is the validation error returned by
// CreateLotResponse.Validate if the designated constraints aren't met.
type CreateLotResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateLotResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateLotResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateLotResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateLotResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateLotResponseValidationError) ErrorName() string {
	return "CreateLotResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateLotResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateLotResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateLotResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateLotResponseValidationError{}

// Validate checks the field values on CreateBidRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateBidRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateBidRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateBidRequestMultiError, or nil if none found.
func (m *CreateBidRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateBidRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for AuctionId

	// no validation rules for Amount

	if len(errors) > 0 {
		return CreateBidRequestMultiError(errors)
	}

	return nil
}

// CreateBidRequestMultiError is an error wrapping multiple validation errors
// returned by CreateBidRequest.ValidateAll() if the designated constraints
// aren't met.
type CreateBidRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateBidRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateBidRequestMultiError) AllErrors() []error { return m }

// CreateBidRequestValidationError is the validation error returned by
// CreateBidRequest.Validate if the designated constraints aren't met.
type CreateBidRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateBidRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateBidRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateBidRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateBidRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateBidRequestValidationError) ErrorName() string { return "CreateBidRequestValidationError" }

// Error satisfies the builtin error interface
func (e CreateBidRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateBidRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateBidRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateBidRequestValidationError{}

// Validate checks the field values on CreateBidResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *CreateBidResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateBidResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateBidResponseMultiError, or nil if none found.
func (m *CreateBidResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateBidResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CreateBidResponseMultiError(errors)
	}

	return nil
}

// CreateBidResponseMultiError is an error wrapping multiple validation errors
// returned by CreateBidResponse.ValidateAll() if the designated constraints
// aren't met.
type CreateBidResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateBidResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateBidResponseMultiError) AllErrors() []error { return m }

// CreateBidResponseValidationError is the validation error returned by
// CreateBidResponse.Validate if the designated constraints aren't met.
type CreateBidResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateBidResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateBidResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateBidResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateBidResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateBidResponseValidationError) ErrorName() string {
	return "CreateBidResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateBidResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateBidResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateBidResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateBidResponseValidationError{}

// Validate checks the field values on CloseAuctionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CloseAuctionRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CloseAuctionRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CloseAuctionRequestMultiError, or nil if none found.
func (m *CloseAuctionRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CloseAuctionRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AuctionId

	if len(errors) > 0 {
		return CloseAuctionRequestMultiError(errors)
	}

	return nil
}

// CloseAuctionRequestMultiError is an error wrapping multiple validation
// errors returned by CloseAuctionRequest.ValidateAll() if the designated
// constraints aren't met.
type CloseAuctionRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CloseAuctionRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CloseAuctionRequestMultiError) AllErrors() []error { return m }

// CloseAuctionRequestValidationError is the validation error returned by
// CloseAuctionRequest.Validate if the designated constraints aren't met.
type CloseAuctionRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CloseAuctionRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CloseAuctionRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CloseAuctionRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CloseAuctionRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CloseAuctionRequestValidationError) ErrorName() string {
	return "CloseAuctionRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CloseAuctionRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCloseAuctionRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CloseAuctionRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CloseAuctionRequestValidationError{}

// Validate checks the field values on CloseAuctionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CloseAuctionResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CloseAuctionResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CloseAuctionResponseMultiError, or nil if none found.
func (m *CloseAuctionResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CloseAuctionResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for WinnerId

	// no validation rules for WinningBid

	if len(errors) > 0 {
		return CloseAuctionResponseMultiError(errors)
	}

	return nil
}

// CloseAuctionResponseMultiError is an error wrapping multiple validation
// errors returned by CloseAuctionResponse.ValidateAll() if the designated
// constraints aren't met.
type CloseAuctionResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CloseAuctionResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CloseAuctionResponseMultiError) AllErrors() []error { return m }

// CloseAuctionResponseValidationError is the validation error returned by
// CloseAuctionResponse.Validate if the designated constraints aren't met.
type CloseAuctionResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CloseAuctionResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CloseAuctionResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CloseAuctionResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CloseAuctionResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CloseAuctionResponseValidationError) ErrorName() string {
	return "CloseAuctionResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CloseAuctionResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCloseAuctionResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CloseAuctionResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CloseAuctionResponseValidationError{}

// Validate checks the field values on ProcessTransactionsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ProcessTransactionsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProcessTransactionsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ProcessTransactionsRequestMultiError, or nil if none found.
func (m *ProcessTransactionsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ProcessTransactionsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for AuctionId

	if len(errors) > 0 {
		return ProcessTransactionsRequestMultiError(errors)
	}

	return nil
}

// ProcessTransactionsRequestMultiError is an error wrapping multiple
// validation errors returned by ProcessTransactionsRequest.ValidateAll() if
// the designated constraints aren't met.
type ProcessTransactionsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProcessTransactionsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProcessTransactionsRequestMultiError) AllErrors() []error { return m }

// ProcessTransactionsRequestValidationError is the validation error returned
// by ProcessTransactionsRequest.Validate if the designated constraints aren't met.
type ProcessTransactionsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProcessTransactionsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProcessTransactionsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProcessTransactionsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProcessTransactionsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProcessTransactionsRequestValidationError) ErrorName() string {
	return "ProcessTransactionsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ProcessTransactionsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProcessTransactionsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProcessTransactionsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProcessTransactionsRequestValidationError{}

// Validate checks the field values on ProcessTransactionsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ProcessTransactionsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProcessTransactionsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ProcessTransactionsResponseMultiError, or nil if none found.
func (m *ProcessTransactionsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ProcessTransactionsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ProcessTransactionsResponseMultiError(errors)
	}

	return nil
}

// ProcessTransactionsResponseMultiError is an error wrapping multiple
// validation errors returned by ProcessTransactionsResponse.ValidateAll() if
// the designated constraints aren't met.
type ProcessTransactionsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProcessTransactionsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProcessTransactionsResponseMultiError) AllErrors() []error { return m }

// ProcessTransactionsResponseValidationError is the validation error returned
// by ProcessTransactionsResponse.Validate if the designated constraints
// aren't met.
type ProcessTransactionsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProcessTransactionsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProcessTransactionsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProcessTransactionsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProcessTransactionsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProcessTransactionsResponseValidationError) ErrorName() string {
	return "ProcessTransactionsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ProcessTransactionsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProcessTransactionsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProcessTransactionsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProcessTransactionsResponseValidationError{}
