// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        v5.28.1
// source: auction/v1/auction.proto

package auction

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	_ "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Lot struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          uint64                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	SellerId    uint64                 `protobuf:"varint,2,opt,name=seller_id,json=sellerId,proto3" json:"seller_id,omitempty"`
	Title       string                 `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	Description string                 `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
	StartPrice  float32                `protobuf:"fixed32,5,opt,name=start_price,json=startPrice,proto3" json:"start_price,omitempty"`
	AuctionId   uint64                 `protobuf:"varint,6,opt,name=auction_id,json=auctionId,proto3" json:"auction_id,omitempty"`
	CreatedAt   *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
}

func (x *Lot) Reset() {
	*x = Lot{}
	mi := &file_auction_v1_auction_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Lot) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Lot) ProtoMessage() {}

func (x *Lot) ProtoReflect() protoreflect.Message {
	mi := &file_auction_v1_auction_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Lot.ProtoReflect.Descriptor instead.
func (*Lot) Descriptor() ([]byte, []int) {
	return file_auction_v1_auction_proto_rawDescGZIP(), []int{0}
}

func (x *Lot) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Lot) GetSellerId() uint64 {
	if x != nil {
		return x.SellerId
	}
	return 0
}

func (x *Lot) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Lot) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Lot) GetStartPrice() float32 {
	if x != nil {
		return x.StartPrice
	}
	return 0
}

func (x *Lot) GetAuctionId() uint64 {
	if x != nil {
		return x.AuctionId
	}
	return 0
}

func (x *Lot) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

type UpBalanceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId uint64  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	Amount float32 `protobuf:"fixed32,2,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (x *UpBalanceRequest) Reset() {
	*x = UpBalanceRequest{}
	mi := &file_auction_v1_auction_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpBalanceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpBalanceRequest) ProtoMessage() {}

func (x *UpBalanceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_auction_v1_auction_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpBalanceRequest.ProtoReflect.Descriptor instead.
func (*UpBalanceRequest) Descriptor() ([]byte, []int) {
	return file_auction_v1_auction_proto_rawDescGZIP(), []int{1}
}

func (x *UpBalanceRequest) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *UpBalanceRequest) GetAmount() float32 {
	if x != nil {
		return x.Amount
	}
	return 0
}

type UpBalanceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *UpBalanceResponse) Reset() {
	*x = UpBalanceResponse{}
	mi := &file_auction_v1_auction_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UpBalanceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpBalanceResponse) ProtoMessage() {}

func (x *UpBalanceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_auction_v1_auction_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpBalanceResponse.ProtoReflect.Descriptor instead.
func (*UpBalanceResponse) Descriptor() ([]byte, []int) {
	return file_auction_v1_auction_proto_rawDescGZIP(), []int{2}
}

type CreateLotRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SellerId    uint64  `protobuf:"varint,1,opt,name=seller_id,json=sellerId,proto3" json:"seller_id,omitempty"`
	Title       string  `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Description string  `protobuf:"bytes,3,opt,name=description,proto3" json:"description,omitempty"`
	StartPrice  float32 `protobuf:"fixed32,4,opt,name=start_price,json=startPrice,proto3" json:"start_price,omitempty"`
}

func (x *CreateLotRequest) Reset() {
	*x = CreateLotRequest{}
	mi := &file_auction_v1_auction_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateLotRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateLotRequest) ProtoMessage() {}

func (x *CreateLotRequest) ProtoReflect() protoreflect.Message {
	mi := &file_auction_v1_auction_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateLotRequest.ProtoReflect.Descriptor instead.
func (*CreateLotRequest) Descriptor() ([]byte, []int) {
	return file_auction_v1_auction_proto_rawDescGZIP(), []int{3}
}

func (x *CreateLotRequest) GetSellerId() uint64 {
	if x != nil {
		return x.SellerId
	}
	return 0
}

func (x *CreateLotRequest) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *CreateLotRequest) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *CreateLotRequest) GetStartPrice() float32 {
	if x != nil {
		return x.StartPrice
	}
	return 0
}

type FetchLotRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LotId uint64 `protobuf:"varint,1,opt,name=lot_id,json=lotId,proto3" json:"lot_id,omitempty"`
}

func (x *FetchLotRequest) Reset() {
	*x = FetchLotRequest{}
	mi := &file_auction_v1_auction_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FetchLotRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchLotRequest) ProtoMessage() {}

func (x *FetchLotRequest) ProtoReflect() protoreflect.Message {
	mi := &file_auction_v1_auction_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchLotRequest.ProtoReflect.Descriptor instead.
func (*FetchLotRequest) Descriptor() ([]byte, []int) {
	return file_auction_v1_auction_proto_rawDescGZIP(), []int{4}
}

func (x *FetchLotRequest) GetLotId() uint64 {
	if x != nil {
		return x.LotId
	}
	return 0
}

type FetchLotResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *Lot `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *FetchLotResponse) Reset() {
	*x = FetchLotResponse{}
	mi := &file_auction_v1_auction_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *FetchLotResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchLotResponse) ProtoMessage() {}

func (x *FetchLotResponse) ProtoReflect() protoreflect.Message {
	mi := &file_auction_v1_auction_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchLotResponse.ProtoReflect.Descriptor instead.
func (*FetchLotResponse) Descriptor() ([]byte, []int) {
	return file_auction_v1_auction_proto_rawDescGZIP(), []int{5}
}

func (x *FetchLotResponse) GetData() *Lot {
	if x != nil {
		return x.Data
	}
	return nil
}

type ListLotsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ListLotsRequest) Reset() {
	*x = ListLotsRequest{}
	mi := &file_auction_v1_auction_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListLotsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListLotsRequest) ProtoMessage() {}

func (x *ListLotsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_auction_v1_auction_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListLotsRequest.ProtoReflect.Descriptor instead.
func (*ListLotsRequest) Descriptor() ([]byte, []int) {
	return file_auction_v1_auction_proto_rawDescGZIP(), []int{6}
}

type ListLotsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Lots []*Lot `protobuf:"bytes,1,rep,name=lots,proto3" json:"lots,omitempty"`
}

func (x *ListLotsResponse) Reset() {
	*x = ListLotsResponse{}
	mi := &file_auction_v1_auction_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListLotsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListLotsResponse) ProtoMessage() {}

func (x *ListLotsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_auction_v1_auction_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListLotsResponse.ProtoReflect.Descriptor instead.
func (*ListLotsResponse) Descriptor() ([]byte, []int) {
	return file_auction_v1_auction_proto_rawDescGZIP(), []int{7}
}

func (x *ListLotsResponse) GetLots() []*Lot {
	if x != nil {
		return x.Lots
	}
	return nil
}

type CreateLotResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data *Lot `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *CreateLotResponse) Reset() {
	*x = CreateLotResponse{}
	mi := &file_auction_v1_auction_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateLotResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateLotResponse) ProtoMessage() {}

func (x *CreateLotResponse) ProtoReflect() protoreflect.Message {
	mi := &file_auction_v1_auction_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateLotResponse.ProtoReflect.Descriptor instead.
func (*CreateLotResponse) Descriptor() ([]byte, []int) {
	return file_auction_v1_auction_proto_rawDescGZIP(), []int{8}
}

func (x *CreateLotResponse) GetData() *Lot {
	if x != nil {
		return x.Data
	}
	return nil
}

type CreateBidRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId    uint64  `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	AuctionId uint64  `protobuf:"varint,2,opt,name=auction_id,json=auctionId,proto3" json:"auction_id,omitempty"`
	Amount    float32 `protobuf:"fixed32,3,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (x *CreateBidRequest) Reset() {
	*x = CreateBidRequest{}
	mi := &file_auction_v1_auction_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateBidRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateBidRequest) ProtoMessage() {}

func (x *CreateBidRequest) ProtoReflect() protoreflect.Message {
	mi := &file_auction_v1_auction_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateBidRequest.ProtoReflect.Descriptor instead.
func (*CreateBidRequest) Descriptor() ([]byte, []int) {
	return file_auction_v1_auction_proto_rawDescGZIP(), []int{9}
}

func (x *CreateBidRequest) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *CreateBidRequest) GetAuctionId() uint64 {
	if x != nil {
		return x.AuctionId
	}
	return 0
}

func (x *CreateBidRequest) GetAmount() float32 {
	if x != nil {
		return x.Amount
	}
	return 0
}

type CreateBidResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CreateBidResponse) Reset() {
	*x = CreateBidResponse{}
	mi := &file_auction_v1_auction_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CreateBidResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreateBidResponse) ProtoMessage() {}

func (x *CreateBidResponse) ProtoReflect() protoreflect.Message {
	mi := &file_auction_v1_auction_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreateBidResponse.ProtoReflect.Descriptor instead.
func (*CreateBidResponse) Descriptor() ([]byte, []int) {
	return file_auction_v1_auction_proto_rawDescGZIP(), []int{10}
}

type CloseAuctionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AuctionId uint64 `protobuf:"varint,1,opt,name=auction_id,json=auctionId,proto3" json:"auction_id,omitempty"`
}

func (x *CloseAuctionRequest) Reset() {
	*x = CloseAuctionRequest{}
	mi := &file_auction_v1_auction_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CloseAuctionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloseAuctionRequest) ProtoMessage() {}

func (x *CloseAuctionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_auction_v1_auction_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloseAuctionRequest.ProtoReflect.Descriptor instead.
func (*CloseAuctionRequest) Descriptor() ([]byte, []int) {
	return file_auction_v1_auction_proto_rawDescGZIP(), []int{11}
}

func (x *CloseAuctionRequest) GetAuctionId() uint64 {
	if x != nil {
		return x.AuctionId
	}
	return 0
}

type CloseAuctionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WinnerId   uint64  `protobuf:"varint,1,opt,name=winner_id,json=winnerId,proto3" json:"winner_id,omitempty"`
	WinningBid float32 `protobuf:"fixed32,2,opt,name=winning_bid,json=winningBid,proto3" json:"winning_bid,omitempty"`
}

func (x *CloseAuctionResponse) Reset() {
	*x = CloseAuctionResponse{}
	mi := &file_auction_v1_auction_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CloseAuctionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CloseAuctionResponse) ProtoMessage() {}

func (x *CloseAuctionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_auction_v1_auction_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CloseAuctionResponse.ProtoReflect.Descriptor instead.
func (*CloseAuctionResponse) Descriptor() ([]byte, []int) {
	return file_auction_v1_auction_proto_rawDescGZIP(), []int{12}
}

func (x *CloseAuctionResponse) GetWinnerId() uint64 {
	if x != nil {
		return x.WinnerId
	}
	return 0
}

func (x *CloseAuctionResponse) GetWinningBid() float32 {
	if x != nil {
		return x.WinningBid
	}
	return 0
}

type ProcessTransactionsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AuctionId uint64 `protobuf:"varint,1,opt,name=auction_id,json=auctionId,proto3" json:"auction_id,omitempty"`
}

func (x *ProcessTransactionsRequest) Reset() {
	*x = ProcessTransactionsRequest{}
	mi := &file_auction_v1_auction_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProcessTransactionsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessTransactionsRequest) ProtoMessage() {}

func (x *ProcessTransactionsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_auction_v1_auction_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessTransactionsRequest.ProtoReflect.Descriptor instead.
func (*ProcessTransactionsRequest) Descriptor() ([]byte, []int) {
	return file_auction_v1_auction_proto_rawDescGZIP(), []int{13}
}

func (x *ProcessTransactionsRequest) GetAuctionId() uint64 {
	if x != nil {
		return x.AuctionId
	}
	return 0
}

type ProcessTransactionsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ProcessTransactionsResponse) Reset() {
	*x = ProcessTransactionsResponse{}
	mi := &file_auction_v1_auction_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ProcessTransactionsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessTransactionsResponse) ProtoMessage() {}

func (x *ProcessTransactionsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_auction_v1_auction_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessTransactionsResponse.ProtoReflect.Descriptor instead.
func (*ProcessTransactionsResponse) Descriptor() ([]byte, []int) {
	return file_auction_v1_auction_proto_rawDescGZIP(), []int{14}
}

var File_auction_v1_auction_proto protoreflect.FileDescriptor

var file_auction_v1_auction_proto_rawDesc = []byte{
	0x0a, 0x18, 0x61, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x75, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x62, 0x65,
	0x68, 0x61, 0x76, 0x69, 0x6f, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d,
	0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0xe5, 0x01, 0x0a, 0x03, 0x4c, 0x6f, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x73,
	0x65, 0x6c, 0x6c, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08,
	0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x61, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x39, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0x5e, 0x0a, 0x10, 0x55,
	0x70, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x23, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x42, 0x0a, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04, 0x32, 0x02, 0x20, 0x00, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x02, 0x42, 0x0d, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x07, 0x0a, 0x05, 0x25, 0x00,
	0x00, 0x00, 0x00, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x13, 0x0a, 0x11, 0x55,
	0x70, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0xb1, 0x01, 0x0a, 0x10, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x09, 0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x0a, 0xe0, 0x41, 0x02, 0xfa, 0x42, 0x04,
	0x32, 0x02, 0x20, 0x00, 0x52, 0x08, 0x73, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x49, 0x64, 0x12, 0x22,
	0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xe0,
	0x41, 0x02, 0xfa, 0x42, 0x06, 0x72, 0x04, 0x10, 0x04, 0x18, 0x20, 0x52, 0x05, 0x74, 0x69, 0x74,
	0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x0b, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x42, 0x0d, 0xe0, 0x41, 0x02, 0xfa, 0x42,
	0x07, 0x0a, 0x05, 0x25, 0x00, 0x00, 0x00, 0x00, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x50,
	0x72, 0x69, 0x63, 0x65, 0x22, 0x28, 0x0a, 0x0f, 0x46, 0x65, 0x74, 0x63, 0x68, 0x4c, 0x6f, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x6c, 0x6f, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x6c, 0x6f, 0x74, 0x49, 0x64, 0x22, 0x2c,
	0x0a, 0x10, 0x46, 0x65, 0x74, 0x63, 0x68, 0x4c, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x18, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x04, 0x2e, 0x4c, 0x6f, 0x74, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x11, 0x0a, 0x0f,
	0x4c, 0x69, 0x73, 0x74, 0x4c, 0x6f, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22,
	0x2c, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x6f, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x04, 0x6c, 0x6f, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x04, 0x2e, 0x4c, 0x6f, 0x74, 0x52, 0x04, 0x6c, 0x6f, 0x74, 0x73, 0x22, 0x2d, 0x0a,
	0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x18, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x04, 0x2e, 0x4c, 0x6f, 0x74, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0x62, 0x0a, 0x10,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x69, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x75, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x61,
	0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x22, 0x13, 0x0a, 0x11, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x69, 0x64, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x34, 0x0a, 0x13, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x41, 0x75,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a,
	0x61, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x09, 0x61, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x54, 0x0a, 0x14, 0x43,
	0x6c, 0x6f, 0x73, 0x65, 0x41, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x77, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x77, 0x69, 0x6e, 0x6e, 0x65, 0x72, 0x49, 0x64,
	0x12, 0x1f, 0x0a, 0x0b, 0x77, 0x69, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x62, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x77, 0x69, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x42, 0x69,
	0x64, 0x22, 0x3b, 0x0a, 0x1a, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1d, 0x0a, 0x0a, 0x61, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x09, 0x61, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x22, 0x1d,
	0x0a, 0x1b, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0xd7, 0x06,
	0x0a, 0x07, 0x41, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0xb7, 0x01, 0x0a, 0x09, 0x55, 0x70,
	0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x12, 0x11, 0x2e, 0x55, 0x70, 0x42, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x55, 0x70, 0x42,
	0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x82,
	0x01, 0x92, 0x41, 0x6a, 0x12, 0x16, 0x55, 0x70, 0x67, 0x72, 0x61, 0x64, 0x65, 0x20, 0x75, 0x73,
	0x65, 0x72, 0x27, 0x73, 0x20, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x1a, 0x3f, 0x41, 0x63,
	0x63, 0x65, 0x70, 0x74, 0x73, 0x20, 0x75, 0x73, 0x65, 0x72, 0x27, 0x73, 0x20, 0x69, 0x64, 0x20,
	0x61, 0x6e, 0x64, 0x20, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x20, 0x77, 0x68, 0x69, 0x63, 0x68,
	0x20, 0x77, 0x69, 0x6c, 0x6c, 0x20, 0x62, 0x65, 0x20, 0x61, 0x64, 0x64, 0x65, 0x64, 0x20, 0x74,
	0x6f, 0x20, 0x74, 0x68, 0x65, 0x20, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x62, 0x0f, 0x0a,
	0x0d, 0x0a, 0x09, 0x61, 0x70, 0x69, 0x2d, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x00, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x0f, 0x3a, 0x01, 0x2a, 0x22, 0x0a, 0x2f, 0x75, 0x70, 0x62, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x12, 0x67, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x74,
	0x12, 0x11, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x33, 0x92, 0x41, 0x20, 0x12, 0x0d, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x73, 0x20, 0x61, 0x20, 0x6c, 0x6f, 0x74, 0x62, 0x0f, 0x0a, 0x0d, 0x0a,
	0x09, 0x61, 0x70, 0x69, 0x2d, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x00, 0x82, 0xd3, 0xe4, 0x93,
	0x02, 0x0a, 0x3a, 0x01, 0x2a, 0x22, 0x05, 0x2f, 0x6c, 0x6f, 0x74, 0x73, 0x12, 0x47, 0x0a, 0x08,
	0x46, 0x65, 0x74, 0x63, 0x68, 0x4c, 0x6f, 0x74, 0x12, 0x10, 0x2e, 0x46, 0x65, 0x74, 0x63, 0x68,
	0x4c, 0x6f, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x46, 0x65, 0x74,
	0x63, 0x68, 0x4c, 0x6f, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x16, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x10, 0x12, 0x0e, 0x2f, 0x6c, 0x6f, 0x74, 0x73, 0x2f, 0x7b, 0x6c, 0x6f,
	0x74, 0x5f, 0x69, 0x64, 0x7d, 0x12, 0x3e, 0x0a, 0x08, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x6f, 0x74,
	0x73, 0x12, 0x10, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x6f, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x11, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x6f, 0x74, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x0d, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x07, 0x12, 0x05,
	0x2f, 0x6c, 0x6f, 0x74, 0x73, 0x12, 0x67, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42,
	0x69, 0x64, 0x12, 0x11, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x69, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x12, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x69,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x33, 0x92, 0x41, 0x20, 0x12, 0x0d,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x73, 0x20, 0x61, 0x20, 0x62, 0x69, 0x64, 0x62, 0x0f, 0x0a,
	0x0d, 0x0a, 0x09, 0x61, 0x70, 0x69, 0x2d, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x00, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x0a, 0x3a, 0x01, 0x2a, 0x22, 0x05, 0x2f, 0x62, 0x69, 0x64, 0x73, 0x12, 0x86,
	0x01, 0x0a, 0x0c, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x41, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x14, 0x2e, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x41, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x41, 0x75, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x49, 0x92, 0x41,
	0x2d, 0x12, 0x1a, 0x43, 0x6c, 0x6f, 0x73, 0x65, 0x73, 0x20, 0x61, 0x75, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x20, 0x66, 0x72, 0x6f, 0x6d, 0x20, 0x62, 0x69, 0x64, 0x69, 0x6e, 0x67, 0x62, 0x0f, 0x0a,
	0x0d, 0x0a, 0x09, 0x61, 0x70, 0x69, 0x2d, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x00, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x13, 0x3a, 0x01, 0x2a, 0x32, 0x0e, 0x2f, 0x61, 0x75, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x2f, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x12, 0xad, 0x01, 0x0a, 0x13, 0x50, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x1b, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x50,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x5b, 0x92, 0x41, 0x38, 0x12,
	0x25, 0x54, 0x72, 0x69, 0x67, 0x67, 0x65, 0x72, 0x73, 0x20, 0x74, 0x68, 0x65, 0x20, 0x70, 0x72,
	0x6f, 0x63, 0x63, 0x65, 0x73, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x62, 0x0f, 0x0a, 0x0d, 0x0a, 0x09, 0x61, 0x70, 0x69, 0x2d,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x00, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x1a, 0x3a, 0x01, 0x2a,
	0x32, 0x15, 0x2f, 0x61, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0xf7, 0x01, 0x92, 0x41, 0xc1, 0x01, 0x12, 0x51,
	0x0a, 0x07, 0x41, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x41, 0x75, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x20, 0x61, 0x2e, 0x6b, 0x2e, 0x61, 0x2e, 0x20, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x70, 0x6c, 0x61, 0x63, 0x65, 0x20, 0x77, 0x68, 0x65, 0x72, 0x65, 0x20, 0x65, 0x76, 0x65, 0x72,
	0x79, 0x6f, 0x6e, 0x65, 0x20, 0x63, 0x61, 0x6e, 0x20, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x20, 0x4c,
	0x6f, 0x74, 0x73, 0x20, 0x74, 0x6f, 0x20, 0x62, 0x69, 0x64, 0x32, 0x05, 0x31, 0x2e, 0x30, 0x2e,
	0x30, 0x1a, 0x0e, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x68, 0x6f, 0x73, 0x74, 0x3a, 0x37, 0x30, 0x30,
	0x30, 0x2a, 0x01, 0x01, 0x32, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x3a, 0x10, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x2f, 0x6a, 0x73, 0x6f, 0x6e, 0x5a, 0x35, 0x0a, 0x33, 0x0a, 0x09, 0x61, 0x70,
	0x69, 0x2d, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x26, 0x08, 0x02, 0x12, 0x13, 0x41, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x1a, 0x0b, 0x78, 0x2d, 0x61, 0x70, 0x69, 0x2d, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x20, 0x02, 0x5a,
	0x30, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x61, 0x73, 0x79,
	0x6f, 0x6b, 0x2f, 0x41, 0x73, 0x73, 0x65, 0x73, 0x73, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x70, 0x6b,
	0x67, 0x2f, 0x61, 0x75, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x3b, 0x61, 0x75, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_auction_v1_auction_proto_rawDescOnce sync.Once
	file_auction_v1_auction_proto_rawDescData = file_auction_v1_auction_proto_rawDesc
)

func file_auction_v1_auction_proto_rawDescGZIP() []byte {
	file_auction_v1_auction_proto_rawDescOnce.Do(func() {
		file_auction_v1_auction_proto_rawDescData = protoimpl.X.CompressGZIP(file_auction_v1_auction_proto_rawDescData)
	})
	return file_auction_v1_auction_proto_rawDescData
}

var file_auction_v1_auction_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_auction_v1_auction_proto_goTypes = []any{
	(*Lot)(nil),                         // 0: Lot
	(*UpBalanceRequest)(nil),            // 1: UpBalanceRequest
	(*UpBalanceResponse)(nil),           // 2: UpBalanceResponse
	(*CreateLotRequest)(nil),            // 3: CreateLotRequest
	(*FetchLotRequest)(nil),             // 4: FetchLotRequest
	(*FetchLotResponse)(nil),            // 5: FetchLotResponse
	(*ListLotsRequest)(nil),             // 6: ListLotsRequest
	(*ListLotsResponse)(nil),            // 7: ListLotsResponse
	(*CreateLotResponse)(nil),           // 8: CreateLotResponse
	(*CreateBidRequest)(nil),            // 9: CreateBidRequest
	(*CreateBidResponse)(nil),           // 10: CreateBidResponse
	(*CloseAuctionRequest)(nil),         // 11: CloseAuctionRequest
	(*CloseAuctionResponse)(nil),        // 12: CloseAuctionResponse
	(*ProcessTransactionsRequest)(nil),  // 13: ProcessTransactionsRequest
	(*ProcessTransactionsResponse)(nil), // 14: ProcessTransactionsResponse
	(*timestamppb.Timestamp)(nil),       // 15: google.protobuf.Timestamp
}
var file_auction_v1_auction_proto_depIdxs = []int32{
	15, // 0: Lot.created_at:type_name -> google.protobuf.Timestamp
	0,  // 1: FetchLotResponse.data:type_name -> Lot
	0,  // 2: ListLotsResponse.lots:type_name -> Lot
	0,  // 3: CreateLotResponse.data:type_name -> Lot
	1,  // 4: Auction.UpBalance:input_type -> UpBalanceRequest
	3,  // 5: Auction.CreateLot:input_type -> CreateLotRequest
	4,  // 6: Auction.FetchLot:input_type -> FetchLotRequest
	6,  // 7: Auction.ListLots:input_type -> ListLotsRequest
	9,  // 8: Auction.CreateBid:input_type -> CreateBidRequest
	11, // 9: Auction.CloseAuction:input_type -> CloseAuctionRequest
	13, // 10: Auction.ProcessTransactions:input_type -> ProcessTransactionsRequest
	2,  // 11: Auction.UpBalance:output_type -> UpBalanceResponse
	8,  // 12: Auction.CreateLot:output_type -> CreateLotResponse
	5,  // 13: Auction.FetchLot:output_type -> FetchLotResponse
	7,  // 14: Auction.ListLots:output_type -> ListLotsResponse
	10, // 15: Auction.CreateBid:output_type -> CreateBidResponse
	12, // 16: Auction.CloseAuction:output_type -> CloseAuctionResponse
	14, // 17: Auction.ProcessTransactions:output_type -> ProcessTransactionsResponse
	11, // [11:18] is the sub-list for method output_type
	4,  // [4:11] is the sub-list for method input_type
	4,  // [4:4] is the sub-list for extension type_name
	4,  // [4:4] is the sub-list for extension extendee
	0,  // [0:4] is the sub-list for field type_name
}

func init() { file_auction_v1_auction_proto_init() }
func file_auction_v1_auction_proto_init() {
	if File_auction_v1_auction_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_auction_v1_auction_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_auction_v1_auction_proto_goTypes,
		DependencyIndexes: file_auction_v1_auction_proto_depIdxs,
		MessageInfos:      file_auction_v1_auction_proto_msgTypes,
	}.Build()
	File_auction_v1_auction_proto = out.File
	file_auction_v1_auction_proto_rawDesc = nil
	file_auction_v1_auction_proto_goTypes = nil
	file_auction_v1_auction_proto_depIdxs = nil
}
